function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { accessor, constant } from "d3plus-common";
import Shape from "./Shape";
import largestRect from "../geom/largestRect";
import path2polygon from "../geom/path2polygon";
/**
    @class Path
    @extends Shape
    @desc Creates SVG Paths based on an array of data.
*/

var Path = /*#__PURE__*/function (_Shape) {
  _inherits(Path, _Shape);

  var _super = _createSuper(Path);

  /**
      @memberof Path
      @desc Invoked when creating a new class instance, and overrides any default parameters inherited from Shape.
      @private
  */
  function Path() {
    var _this;

    _classCallCheck(this, Path);

    _this = _super.call(this, "path");
    _this._d = accessor("path");

    _this._labelBounds = function (d, i, aes) {
      var r = largestRect(aes.points, {
        angle: _this._labelConfig.rotate ? _this._labelConfig.rotate(d, i) : 0
      });
      return r ? {
        angle: r.angle,
        width: r.width,
        height: r.height,
        x: r.cx - r.width / 2,
        y: r.cy - r.height / 2
      } : false;
    };

    _this._name = "Path";
    _this._labelConfig = Object.assign(_this._labelConfig, {
      textAnchor: "middle",
      verticalAlign: "middle"
    });
    return _this;
  }
  /**
      @memberof Path
      @desc Given a specific data point and index, returns the aesthetic properties of the shape.
      @param {Object} *data point*
      @param {Number} *index*
      @private
  */


  _createClass(Path, [{
    key: "_aes",
    value: function _aes(d, i) {
      return {
        points: path2polygon(this._d(d, i))
      };
    }
    /**
        @memberof Path
        @desc Draws the paths.
        @param {Function} [*callback*]
        @chainable
    */

  }, {
    key: "render",
    value: function render(callback) {
      _get(_getPrototypeOf(Path.prototype), "render", this).call(this, callback);

      var enter = this._enter.attr("d", this._d).call(this._applyStyle.bind(this));

      var update = this._update;

      if (this._duration) {
        enter.attr("opacity", 0).transition(this._transition).attr("opacity", 1);
        update = update.transition(this._transition);

        this._exit.transition(this._transition).attr("opacity", 0);
      }

      update.call(this._applyStyle.bind(this)).attr("d", this._d);
      return this;
    }
    /**
        @memberof Path
        @desc If *value* is specified, sets the "d" attribute accessor to the specified function or number and returns the current class instance.
        @param {Function|String} [*value*]
        @chainable
        @example
    function(d) {
    return d.path;
    }
    */

  }, {
    key: "d",
    value: function d(_) {
      return arguments.length ? (this._d = typeof _ === "function" ? _ : constant(_), this) : this._d;
    }
  }]);

  return Path;
}(Shape);

export { Path as default };