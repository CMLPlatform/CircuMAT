function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import lineIntersection from "./lineIntersection";
import segmentBoxContains from "./segmentBoxContains";
import pointDistanceSquared from "./pointDistanceSquared";
/**
    @function polygonRayCast
    @desc Gives the two closest intersection points between a ray cast from a point inside a polygon. The two points should lie on opposite sides of the origin.
    @param {Array} poly The polygon to test against, which should be an `[x, y]` formatted Array.
    @param {Array} origin The origin point of the ray to be cast, which should be an `[x, y]` formatted Array.
    @param {Number} [alpha = 0] The angle in radians of the ray.
    @returns {Array} An array containing two values, the closest point on the left and the closest point on the right. If either point cannot be found, that value will be `null`.
*/

export default function (poly, origin) {
  var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var eps = 1e-9;
  origin = [origin[0] + eps * Math.cos(alpha), origin[1] + eps * Math.sin(alpha)];

  var _origin = origin,
      _origin2 = _slicedToArray(_origin, 2),
      x0 = _origin2[0],
      y0 = _origin2[1];

  var shiftedOrigin = [x0 + Math.cos(alpha), y0 + Math.sin(alpha)];
  var idx = 0;
  if (Math.abs(shiftedOrigin[0] - x0) < eps) idx = 1;
  var i = -1;
  var n = poly.length;
  var b = poly[n - 1];
  var minSqDistLeft = Number.MAX_VALUE;
  var minSqDistRight = Number.MAX_VALUE;
  var closestPointLeft = null;
  var closestPointRight = null;

  while (++i < n) {
    var a = b;
    b = poly[i];
    var p = lineIntersection(origin, shiftedOrigin, a, b);

    if (p && segmentBoxContains(a, b, p)) {
      var sqDist = pointDistanceSquared(origin, p);

      if (p[idx] < origin[idx]) {
        if (sqDist < minSqDistLeft) {
          minSqDistLeft = sqDist;
          closestPointLeft = p;
        }
      } else if (p[idx] > origin[idx]) {
        if (sqDist < minSqDistRight) {
          minSqDistRight = sqDist;
          closestPointRight = p;
        }
      }
    }
  }

  return [closestPointLeft, closestPointRight];
}