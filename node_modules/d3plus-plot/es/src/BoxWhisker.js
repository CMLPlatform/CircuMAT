function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { assign, constant } from "d3plus-common";
import { default as Plot } from "./Plot";
/**
    @class BoxWhisker
    @extends Plot
    @desc Creates a simple box and whisker based on an array of data.
    @example <caption>the equivalent of calling:</caption>
new d3plus.Plot()
  .discrete("x")
  .shape("Box")
*/

var BoxWhisker = /*#__PURE__*/function (_Plot) {
  _inherits(BoxWhisker, _Plot);

  var _super = _createSuper(BoxWhisker);

  /**
      @memberof BoxWhisker
      @desc Invoked when creating a new class instance, and overrides any default parameters inherited from Plot.
      @private
  */
  function BoxWhisker() {
    var _this;

    _classCallCheck(this, BoxWhisker);

    _this = _super.call(this);
    _this._discrete = "x";
    _this._shape = constant("Box");

    _this.x("x");

    _this._tooltipConfig = assign(_this._tooltipConfig, {
      title: function title(d, i) {
        if (!d) return "";

        while (d.__d3plus__ && d.data) {
          d = d.data;
          i = d.i;
        }

        if (_this._label) return _this._label(d, i);

        var l = _this._ids(d, i).slice(0, _this._drawDepth);

        return l[l.length - 1];
      }
    });
    return _this;
  }

  return BoxWhisker;
}(Plot);

export { BoxWhisker as default };