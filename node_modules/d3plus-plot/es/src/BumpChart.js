function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { constant } from "d3plus-common";
import { default as Plot } from "./Plot";
/**
    @class BumpChart
    @extends Plot
    @desc Creates a bump chart based on an array of data.
    @example <caption>the equivalent of calling:</caption>
new d3plus.Plot()
  .discrete("x")
  .shape("Line")
  .x("x")
  .y2(d => this._y(d))
  .yConfig({
    tickFormat: val => {
      const data = this._formattedData;
      const xDomain = this._xDomain;
      const startData = data.filter(d => d.x === xDomain[0]);
      const d = startData.find(d => d.y === val);
      return this._drawLabel(d, d.i);
     }
   })
  .y2Config({
    tickFormat: val => {
      const data = this._formattedData;
      const xDomain = this._xDomain;
      const endData = data.filter(d => d.x === xDomain[xDomain.length - 1]);
      const d = endData.find(d => d.y === val);
      return this._drawLabel(d, d.i);
     }
   })
  .ySort((a, b) => b.y - a.y)
  .y2Sort((a, b) => b.y - a.y)
*/

var BumpChart = /*#__PURE__*/function (_Plot) {
  _inherits(BumpChart, _Plot);

  var _super = _createSuper(BumpChart);

  /**
      @memberof BumpChart
      @desc Invoked when creating a new class instance, and overrides any default parameters inherited from Plot.
      @private
  */
  function BumpChart() {
    var _this;

    _classCallCheck(this, BumpChart);

    _this = _super.call(this);
    _this._discrete = "x";
    _this._shape = constant("Line");

    _this.x("x");

    _this.y2(function (d) {
      return _this._y(d);
    });

    _this.yConfig({
      tickFormat: function tickFormat(val) {
        var data = _this._formattedData;
        var xMin = data[0].x instanceof Date ? data[0].x.getTime() : data[0].x;
        var startData = data.filter(function (d) {
          return (d.x instanceof Date ? d.x.getTime() : d.x) === xMin;
        });
        var d = startData.find(function (d) {
          return d.y === val;
        });
        return d ? _this._drawLabel(d, d.i) : "";
      }
    });

    _this.y2Config({
      tickFormat: function tickFormat(val) {
        var data = _this._formattedData;
        var xMax = data[data.length - 1].x instanceof Date ? data[data.length - 1].x.getTime() : data[data.length - 1].x;
        var endData = data.filter(function (d) {
          return (d.x instanceof Date ? d.x.getTime() : d.x) === xMax;
        });
        var d = endData.find(function (d) {
          return d.y === val;
        });
        return d ? _this._drawLabel(d, d.i) : "";
      }
    });

    _this.ySort(function (a, b) {
      return _this._y(b) - _this._y(a);
    });

    _this.y2Sort(function (a, b) {
      return _this._y(b) - _this._y(a);
    });

    return _this;
  }

  return BumpChart;
}(Plot);

export { BumpChart as default };