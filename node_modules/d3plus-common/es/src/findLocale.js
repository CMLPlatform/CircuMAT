function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import lcid from "windows-locale";
import iso from "iso639-codes";
var locales = [];
var isoKeys = Object.keys(iso);
Object.keys(lcid).map(function (id) {
  var locale = lcid[id];
  var isoLanguage = isoKeys.find(function (name) {
    return name.toLowerCase() === locale.language.toLowerCase();
  });

  if (locale.location && isoLanguage) {
    var _locales$push;

    locales.push((_locales$push = {}, _defineProperty(_locales$push, "name", locale.language), _defineProperty(_locales$push, "location", locale.location), _defineProperty(_locales$push, "tag", locale.tag), _defineProperty(_locales$push, "lcid", locale.id), _defineProperty(_locales$push, "iso639-2", iso[isoLanguage]["iso639-2"]), _defineProperty(_locales$push, "iso639-1", iso[isoLanguage]["iso639-1"]), _locales$push));
  }
});
var defaultLocales = {
  ar: "ar-SA",
  ca: "ca-ES",
  da: "da-DK",
  en: "en-US",
  ko: "ko-KR",
  pa: "pa-IN",
  pt: "pt-BR",
  sv: "sv-SE"
};
/**
 * Converts a 2-digit language into a full language-LOCATION locale.
 * @param {String} locale
 */

export default function (locale) {
  if (typeof locale !== "string" || locale.length === 5) return locale;
  if (defaultLocales[locale]) return defaultLocales[locale];
  var list = locales.filter(function (d) {
    return d["iso639-1"] === locale;
  });
  if (!list.length) return locale;else if (list.length === 1) return list[0].tag;else if (list.find(function (d) {
    return d.tag === "".concat(locale, "-").concat(locale.toUpperCase());
  })) return "".concat(locale, "-").concat(locale.toUpperCase());else return list[0].tag;
}