function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
    @external Viz
    @see https://github.com/d3plus/d3plus-viz#Viz
*/
import { nest } from "d3-collection";
import { hierarchy, pack } from "d3-hierarchy";
import { accessor, assign, configPrep, constant, elem } from "d3plus-common";
import { Circle } from "d3plus-shape";
import { Viz } from "d3plus-viz";

var recursionCircles = function recursionCircles(d) {
  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (d.values) {
    d.values.forEach(function (h) {
      arr.push(h);
      recursionCircles(h, arr);
    });
  } else {
    arr.push(d);
  }

  return arr;
};
/**
    @class Pack
    @extends Viz
    @desc Uses the [d3 pack layout](https://github.com/d3/d3-hierarchy#pack) to creates Circle Packing chart based on an array of data.
*/


var Pack = /*#__PURE__*/function (_Viz) {
  _inherits(Pack, _Viz);

  var _super = _createSuper(Pack);

  /**
      @memberof Pack
      @desc Invoked when creating a new class instance, and sets any default parameters.
      @private
  */
  function Pack() {
    var _this;

    _classCallCheck(this, Pack);

    _this = _super.call(this);
    _this._layoutPadding = 1;
    var defaultLegend = _this._legend;

    _this._legend = function (config, arr) {
      if (arr.length === _this._filteredData.length) return false;
      return defaultLegend.bind(_assertThisInitialized(_this))(config, arr);
    };

    _this._on.mouseenter = function () {};

    var defaultMouseMoveLegend = _this._on["mousemove.legend"];

    _this._on["mousemove.legend"] = function (d, i, x, event) {
      defaultMouseMoveLegend(d, i, x, event);

      var ids = _this._ids(d, i);

      var hoverData = recursionCircles(d);

      _this.hover(function (h) {
        var hover = Object.keys(h).filter(function (key) {
          return key !== "value";
        }).every(function (key) {
          return d[key] && d[key].includes(h[key]);
        });
        if (hover) hoverData.push(h);else if (ids.includes(h.key)) hoverData.push.apply(hoverData, _toConsumableArray(recursionCircles(h, [h])));
        return hoverData.includes(h);
      });
    };

    var defaultMouseMoveShape = _this._on["mousemove.shape"];

    _this._on["mousemove.shape"] = function (d, i, x, event) {
      if (d.__d3plusTooltip__) defaultMouseMoveShape(d, i, x, event);

      _this.hover(function (h) {
        return recursionCircles(d, [d]).includes(h);
      });
    };

    _this._pack = pack();
    _this._packOpacity = constant(0.25);
    _this._shape = constant("Circle");
    _this._shapeConfig = assign(_this._shapeConfig, {
      Circle: {
        label: function label(d) {
          return d.parent && !d.children ? d.id : false;
        },
        labelConfig: {
          fontResize: true
        },
        opacity: function opacity(d) {
          return d.__d3plusOpacity__;
        }
      }
    });

    _this._sort = function (a, b) {
      return b.value - a.value;
    };

    _this._sum = accessor("value");
    return _this;
  }
  /**
      Extends the draw behavior of the abstract Viz class.
      @private
  */


  _createClass(Pack, [{
    key: "_draw",
    value: function _draw(callback) {
      var _this2 = this;

      _get(_getPrototypeOf(Pack.prototype), "_draw", this).call(this, callback);

      var height = this._height - this._margin.top - this._margin.bottom,
          width = this._width - this._margin.left - this._margin.right;
      var diameter = Math.min(height, width);
      var transform = "translate(".concat((width - diameter) / 2, ", ").concat((height - diameter) / 2, ")");
      var nestedData = nest();

      for (var i = 0; i <= this._drawDepth; i++) {
        nestedData.key(this._groupBy[i]);
      }

      nestedData = nestedData.entries(this._filteredData);

      var packData = this._pack.padding(this._layoutPadding).size([diameter, diameter])(hierarchy({
        key: nestedData.key,
        values: nestedData
      }, function (d) {
        return d.values;
      }).sum(this._sum).sort(this._sort)).descendants();

      packData.forEach(function (d, i) {
        d.__d3plus__ = true;
        d.i = i;
        d.id = d.parent ? d.parent.data.key : null;
        d.data.__d3plusOpacity__ = d.height ? _this2._packOpacity(d.data, i) : 1;
        d.data.__d3plusTooltip__ = !d.height ? true : false;
      });

      this._shapes.push(new Circle().data(packData).select(elem("g.d3plus-Pack", {
        parent: this._select,
        enter: {
          transform: transform
        },
        update: {
          transform: transform
        }
      }).node()).config(configPrep.bind(this)(this._shapeConfig, "shape", "Circle")).render());

      return this;
    }
    /**
        @memberof Pack
        @desc If *value* is specified, sets the hover method to the specified function and returns the current class instance.
        @param {Function} [*value*]
        @chainable
     */

  }, {
    key: "hover",
    value: function hover(_) {
      this._hover = _;

      this._shapes.forEach(function (s) {
        return s.hover(_);
      });

      if (this._legend) this._legendClass.hover(_);
      return this;
    }
    /**
        @memberof Pack
        @desc If *value* is specified, sets the opacity accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current pack opacity accessor.
        @param {Function|Number} [*value*]
    */

  }, {
    key: "layoutPadding",
    value: function layoutPadding(_) {
      return arguments.length ? (this._layoutPadding = _, this) : this._layoutPadding;
    }
    /**
        @memberof Pack
        @desc If *value* is specified, sets the padding accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current pack opacity accessor.
        @param {Function|Number} [*value*]
    */

  }, {
    key: "packOpacity",
    value: function packOpacity(_) {
      return arguments.length ? (this._packOpacity = typeof _ === "function" ? _ : constant(_), this) : this._packOpacity;
    }
    /**
        @memberof Pack
        @desc If *comparator* is specified, sets the sort order for the pack using the specified comparator function. If *comparator* is not specified, returns the current group sort order, which defaults to descending order by the associated input data's numeric value attribute.
        @param {Array} [*comparator*]
        @example
    function comparator(a, b) {
    return b.value - a.value;
    }
    */

  }, {
    key: "sort",
    value: function sort(_) {
      return arguments.length ? (this._sort = _, this) : this._sort;
    }
    /**
        @memberof Pack
        @desc If *value* is specified, sets the sum accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current sum accessor.
        @param {Function|Number} [*value*]
        @example
    function sum(d) {
    return d.sum;
    }
    */

  }, {
    key: "sum",
    value: function sum(_) {
      return arguments.length ? (this._sum = typeof _ === "function" ? _ : accessor(_), this) : this._sum;
    }
  }]);

  return Pack;
}(Viz);

export { Pack as default };