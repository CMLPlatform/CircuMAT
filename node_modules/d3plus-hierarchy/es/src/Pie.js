function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { min } from "d3-array";
import { arc, pie } from "d3-shape";
import { accessor, assign, configPrep, elem } from "d3plus-common";
import { Path } from "d3plus-shape";
import { Viz } from "d3plus-viz";
/**
    @class Pie
    @extends Viz
    @desc Uses the [d3 pie layout](https://github.com/d3/d3-shape#pies) to creates SVG arcs based on an array of data.
*/

var Pie = /*#__PURE__*/function (_Viz) {
  _inherits(Pie, _Viz);

  var _super = _createSuper(Pie);

  /**
      @memberof Pie
      @desc Invoked when creating a new class instance, and sets any default parameters.
      @private
  */
  function Pie() {
    var _this;

    _classCallCheck(this, Pie);

    _this = _super.call(this);
    var defaultLegend = _this._legend;

    _this._legend = function (config, arr) {
      if (arr.length === _this._filteredData.length) return false;
      return defaultLegend.bind(_assertThisInitialized(_this))(config, arr);
    };

    _this._legendSort = function (a, b) {
      return _this._value(b) - _this._value(a);
    };

    _this._shapeConfig = assign(_this._shapeConfig, {
      ariaLabel: function ariaLabel(d, i) {
        return _this._pieData ? "".concat(++_this._pieData[i].index, ". ").concat(_this._drawLabel(d, i), ", ").concat(_this._value(d, i), ".") : "";
      },
      Path: {
        labelConfig: {
          fontResize: true
        }
      }
    });
    _this._innerRadius = 0;

    _this._legendSort = function (a, b) {
      return _this._value(b) - _this._value(a);
    };

    _this._padPixel = 0;
    _this._pie = pie();

    _this._sort = function (a, b) {
      return _this._value(b) - _this._value(a);
    };

    _this._value = accessor("value");
    return _this;
  }
  /**
      Extends the draw behavior of the abstract Viz class.
      @private
  */


  _createClass(Pie, [{
    key: "_draw",
    value: function _draw(callback) {
      var _this2 = this;

      _get(_getPrototypeOf(Pie.prototype), "_draw", this).call(this, callback);

      var height = this._height - this._margin.top - this._margin.bottom,
          width = this._width - this._margin.left - this._margin.right;
      var outerRadius = min([width, height]) / 2;

      var pieData = this._pieData = this._pie.padAngle(this._padAngle || this._padPixel / outerRadius).sort(this._sort).value(this._value)(this._filteredData);

      pieData.forEach(function (d, i) {
        d.__d3plus__ = true;
        d.i = i;
      });
      var arcData = arc().innerRadius(this._innerRadius).outerRadius(outerRadius);
      var transform = "translate(".concat(width / 2 + this._margin.left, ", ").concat(height / 2 + this._margin.top, ")");

      this._shapes.push(new Path().data(pieData).d(arcData).select(elem("g.d3plus-Pie", {
        parent: this._select,
        enter: {
          transform: transform
        },
        update: {
          transform: transform
        }
      }).node()).config({
        id: function id(d) {
          return _this2._ids(d).join("-");
        },
        x: 0,
        y: 0
      }).label(this._drawLabel).config(configPrep.bind(this)(this._shapeConfig, "shape", "Path")).render());

      return this;
    }
    /**
        @memberof Pie
        @desc If *value* is specified, sets the inner radius accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current inner radius accessor.
        @param {Function|Number} [*value*]
    */

  }, {
    key: "innerRadius",
    value: function innerRadius(_) {
      return arguments.length ? (this._innerRadius = _, this) : this._innerRadius;
    }
    /**
        @memberof Pie
        @desc If *value* is specified, sets the arc padding to the specified radian value and returns the current class instance. If *value* is not specified, returns the current radian padding.
        @param {Number} [*value*]
    */

  }, {
    key: "padAngle",
    value: function padAngle(_) {
      return arguments.length ? (this._padAngle = _, this) : this._padAngle;
    }
    /**
        @memberof Pie
        @desc If *value* is specified, sets the arc padding to the specified pixel value and returns the current class instance. If *value* is not specified, returns the current pixel padding.
        @param {Number} [*value*]
    */

  }, {
    key: "padPixel",
    value: function padPixel(_) {
      return arguments.length ? (this._padPixel = _, this) : this._padPixel;
    }
    /**
        @memberof Pie
        @desc If *comparator* is specified, sets the sort order for the pie slices using the specified comparator function. If *comparator* is not specified, returns the current sort order, which defaults to descending order by the associated input data's numeric value attribute.
        @param {Array} [*comparator*]
        @example
    function comparator(a, b) {
    return b.value - a.value;
    }
    */

  }, {
    key: "sort",
    value: function sort(_) {
      return arguments.length ? (this._sort = _, this) : this._sort;
    }
    /**
        @memberof Pie
        @desc If *value* is specified, sets the value accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current value accessor.
        @param {Function|String} *value*
        @example
    function value(d) {
    return d.value;
    }
    */

  }, {
    key: "value",
    value: function value(_) {
      return arguments.length ? (this._value = typeof _ === "function" ? _ : accessor(_), this) : this._value;
    }
  }]);

  return Pie;
}(Viz);

export { Pie as default };