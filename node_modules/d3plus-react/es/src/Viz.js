function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from "react";
import PropTypes from "prop-types";
import { assign } from "d3plus-common";
/**
    @class Viz
    @extends React.Component
    @desc Creates SVG paths and coordinate points based on an array of data. See [this example](https://d3plus.org/examples/d3plus-geomap/getting-started/) for help getting started using the geomap generator.
*/

var Viz = /*#__PURE__*/function (_Component) {
  _inherits(Viz, _Component);

  var _super = _createSuper(Viz);

  function Viz() {
    _classCallCheck(this, Viz);

    return _super.apply(this, arguments);
  }

  _createClass(Viz, [{
    key: "componentDidMount",
    value:
    /**
        @memberof Viz
        @desc Initializes the specific visualization's class instance and binds it to the container <div>.
        @private
    */
    function componentDidMount() {
      var Constructor = this.props.type;
      this.prevGlobalConfig = this.context.d3plus || {};
      this.viz = new Constructor().select(this.container);
      this.renderViz.bind(this)();
    }
    /**
        @memberof Viz
        @desc Updates visualization config on component update.
        @private
    */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var globalConfig = this.context.d3plus || {};
      var _this$props = this.props,
          config = _this$props.config,
          forceUpdate = _this$props.forceUpdate;
      var c = assign({}, globalConfig, config);
      var c2 = assign({}, this.prevGlobalConfig, prevProps.config);
      this.prevGlobalConfig = globalConfig;
      var same = forceUpdate ? false : JSON.stringify(c) === JSON.stringify(c2);
      if (!same) this.renderViz.bind(this)();
    }
    /**
        @memberof Viz
        @desc Sets visualization config, accounting for dataFormat, linksFormat, nodesFormat or topojsonFormat, and renders the visualization.
        @private
    */

  }, {
    key: "renderViz",
    value: function renderViz() {
      var viz = this.viz;
      var _this$props2 = this.props,
          config = _this$props2.config,
          dataFormat = _this$props2.dataFormat,
          linksFormat = _this$props2.linksFormat,
          nodesFormat = _this$props2.nodesFormat,
          topojsonFormat = _this$props2.topojsonFormat;
      var globalConfig = this.context.d3plus || {};
      var c = assign({}, globalConfig, config);
      viz.config(c);
      if (dataFormat && c.data) viz.data(c.data, dataFormat);
      if (linksFormat && c.links) viz.links(c.links, linksFormat);
      if (nodesFormat && c.nodes) viz.nodes(c.nodes, nodesFormat);
      if (topojsonFormat && c.topojson) viz.topojson(c.topojson, topojsonFormat);
      viz.render();
    }
    /**
        @memberof Viz
        @desc Renders an empty container to hold the visualization.
        @private
    */

  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var className = this.props.className;
      return /*#__PURE__*/React.createElement("div", {
        className: className,
        ref: function ref(container) {
          return _this.container = container;
        }
      });
    }
  }]);

  return Viz;
}(Component);

Viz.contextTypes = {
  d3plus: PropTypes.object
};
Viz.defaultProps = {
  className: "viz",
  forceUpdate: false
};
/**
    @memberof Viz
    @param {Object} [config = {}] An object containing method/value pairs to be passed to the visualization's .config( ) method.
    @param {Function} [dataFormat = d3plus.dataFold] A custom formatting function to be used when formatting data from an AJAX request. The function will be passed the raw data returned from the request, and is expected to return an array of values used for the data method.
    @param {Function} [linksFormat = d3plus.links(path, formatter)] A custom formatting function to be used when formatting links from an AJAX request. The function will be passed the raw data returned from the request, and is expected to return an array of values used for the links method.
    @param {Function} [nodesFormat = d3plus.nodes(path, formatter)] A custom formatting function to be used when formatting nodes from an AJAX request. The function will be passed the raw data returned from the request, and is expected to return an array of values used for the nodes method.
    @param {Function} [topojsonFormat = d3plus.topojson(path, formatter)] A custom formatting function to be used when formatting topojson from an AJAX request. The function will be passed the raw data returned from the request, and is expected to return an array of values used for the topojson method.
*/

export default Viz;