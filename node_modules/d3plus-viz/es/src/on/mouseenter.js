var flattenIds = function flattenIds(levels) {
  return levels.reduce(function (arr, level) {
    if (level instanceof Array) {
      if (arr.length) {
        var oldArray = arr.slice();
        arr = [];
        level.forEach(function (id) {
          return arr = arr.concat(oldArray.map(function (a) {
            return "".concat(a, "_").concat(id);
          }));
        });
      } else {
        arr = level.slice();
      }
    } else if (arr.length) {
      arr = arr.map(function (a) {
        return "".concat(a, "_").concat(level);
      });
    } else {
      arr.push(level);
    }

    return arr;
  }, []);
};
/**
    @desc On mouseenter event for all shapes in a Viz.
    @param {Object} *d* The data object being interacted with.
    @param {Number} *i* The index of the data object being interacted with.
    @private
*/


export default function (d, i) {
  var _this = this;

  if (this._shapeConfig.hoverOpacity !== 1) {
    var filterIds = flattenIds(this._ids(d, i));
    this.hover(function (h, x) {
      var ids = flattenIds(_this._ids(h, x));
      return filterIds.some(function (id) {
        return ids.includes(id);
      });
    });
  }
}