import { rollup } from "d3-array";
import { configPrep, elem, merge } from "d3plus-common";
/**
    @function legendLabel
    @desc Default label function for the legend.
    @private
*/

export function legendLabel(d, i) {
  return this._drawLabel(d, i, this._legendDepth);
}
/**
    @function _drawLegend
    @desc Renders the legend if this._legend is not falsy.
    @param {Array} data The filtered data array to be displayed.
    @private
*/

export default function () {
  var _this = this;

  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var legendData = [];

  var color = function color(d, i) {
    var shape = _this._shape(d, i);

    var attr = shape === "Line" ? "stroke" : "fill";
    var value = _this._shapeConfig[shape] && _this._shapeConfig[shape][attr] ? _this._shapeConfig[shape][attr] : _this._shapeConfig[attr];
    return typeof value === "function" ? value.bind(_this)(d, i) : value;
  };

  var opacity = function opacity(d, i) {
    var shape = _this._shape(d, i);

    var value = _this._shapeConfig[shape] && _this._shapeConfig[shape].opacity ? _this._shapeConfig[shape].opacity : _this._shapeConfig.opacity;
    return typeof value === "function" ? value.bind(_this)(d, i) : value;
  };

  var fill = function fill(d, i) {
    return "".concat(color(d, i), "_").concat(opacity(d, i));
  };

  var rollupData = this._colorScale ? data.filter(function (d, i) {
    return _this._colorScale(d, i) === undefined;
  }) : data;
  rollup(rollupData, function (leaves) {
    return legendData.push(merge(leaves, _this._aggs));
  }, fill);
  legendData.sort(this._legendSort);
  var labels = legendData.map(function (d, i) {
    return _this._ids(d, i).slice(0, _this._drawDepth + 1);
  });
  this._legendDepth = 0;

  var _loop = function _loop(x) {
    var values = labels.map(function (l) {
      return l[x];
    });

    if (!values.some(function (v) {
      return v instanceof Array;
    }) && Array.from(new Set(values)).length === legendData.length) {
      _this._legendDepth = x;
      return "break";
    }
  };

  for (var x = 0; x <= this._drawDepth; x++) {
    var _ret = _loop(x);

    if (_ret === "break") break;
  }

  var hidden = function hidden(d, i) {
    var id = _this._id(d, i);

    if (id instanceof Array) id = id[0];
    return _this._hidden.includes(id) || _this._solo.length && !_this._solo.includes(id);
  };

  var legendBounds = this._legendClass.outerBounds();

  var config = this.config();

  var position = this._legendPosition.bind(this)(config);

  if (![false, "top", "bottom", "left", "right"].includes(position)) position = "bottom";
  var wide = ["top", "bottom"].includes(position);
  var padding = this._legendPadding() ? this._padding : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var transform = {
    transform: "translate(".concat(wide ? this._margin.left + padding.left : this._margin.left, ", ").concat(wide ? this._margin.top : this._margin.top + padding.top, ")")
  };

  var visible = this._legend.bind(this)(config, legendData);

  var legendGroup = elem("g.d3plus-viz-legend", {
    condition: visible && !this._legendConfig.select,
    enter: transform,
    parent: this._select,
    duration: this._duration,
    update: transform
  }).node();

  this._legendClass.id(fill).align(wide ? "center" : position).direction(wide ? "row" : "column").duration(this._duration).data(visible ? legendData : []).height(wide ? this._height - (this._margin.bottom + this._margin.top) : this._height - (this._margin.bottom + this._margin.top + padding.bottom + padding.top)).locale(this._locale).parent(this).select(legendGroup).verticalAlign(!wide ? "middle" : position).width(wide ? this._width - (this._margin.left + this._margin.right + padding.left + padding.right) : this._width - (this._margin.left + this._margin.right)).shapeConfig(configPrep.bind(this)(this._shapeConfig, "legend")).shapeConfig({
    fill: function fill(d, i) {
      return hidden(d, i) ? _this._hiddenColor(d, i) : color(d, i);
    },
    labelConfig: {
      fontOpacity: function fontOpacity(d, i) {
        return hidden(d, i) ? _this._hiddenOpacity(d, i) : 1;
      }
    },
    opacity: opacity
  }).config(this._legendConfig).render();

  if (!this._legendConfig.select && legendBounds.height) {
    if (wide) this._margin[position] += legendBounds.height + this._legendClass.padding() * 2;else this._margin[position] += legendBounds.width + this._legendClass.padding() * 2;
  }
}